/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Proto.Todo.DeleteTodoItemRequest', null, global);
goog.exportSymbol('proto.Proto.Todo.DeleteTodoItemResponse', null, global);
goog.exportSymbol('proto.Proto.Todo.Empty', null, global);
goog.exportSymbol('proto.Proto.Todo.GetTodoItemRequest', null, global);
goog.exportSymbol('proto.Proto.Todo.GetTodoItemResponse', null, global);
goog.exportSymbol('proto.Proto.Todo.GetTodoItemsResponse', null, global);
goog.exportSymbol('proto.Proto.Todo.PostTodoItemRequest', null, global);
goog.exportSymbol('proto.Proto.Todo.PostTodoItemResponse', null, global);
goog.exportSymbol('proto.Proto.Todo.PutTodoItemRequest', null, global);
goog.exportSymbol('proto.Proto.Todo.PutTodoItemResponse', null, global);
goog.exportSymbol('proto.Proto.Todo.Todo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Todo.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Todo.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proto.Todo.Empty.displayName = 'proto.Proto.Todo.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Todo.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Todo.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Todo.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Todo.Empty}
 */
proto.Proto.Todo.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Todo.Empty;
  return proto.Proto.Todo.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Todo.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Todo.Empty}
 */
proto.Proto.Todo.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Todo.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Todo.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Todo.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Todo.Todo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Todo.Todo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proto.Todo.Todo.displayName = 'proto.Proto.Todo.Todo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Todo.Todo.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Todo.Todo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Todo.Todo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.Todo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    iscomplete: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Todo.Todo}
 */
proto.Proto.Todo.Todo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Todo.Todo;
  return proto.Proto.Todo.Todo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Todo.Todo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Todo.Todo}
 */
proto.Proto.Todo.Todo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscomplete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Todo.Todo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Todo.Todo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Todo.Todo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.Todo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIscomplete();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.Proto.Todo.Todo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Proto.Todo.Todo.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.Proto.Todo.Todo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Proto.Todo.Todo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool IsComplete = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Proto.Todo.Todo.prototype.getIscomplete = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Proto.Todo.Todo.prototype.setIscomplete = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Todo.GetTodoItemsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Proto.Todo.GetTodoItemsResponse.repeatedFields_, null);
};
goog.inherits(proto.Proto.Todo.GetTodoItemsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proto.Todo.GetTodoItemsResponse.displayName = 'proto.Proto.Todo.GetTodoItemsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Proto.Todo.GetTodoItemsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Todo.GetTodoItemsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Todo.GetTodoItemsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Todo.GetTodoItemsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.GetTodoItemsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    todosList: jspb.Message.toObjectList(msg.getTodosList(),
    proto.Proto.Todo.Todo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Todo.GetTodoItemsResponse}
 */
proto.Proto.Todo.GetTodoItemsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Todo.GetTodoItemsResponse;
  return proto.Proto.Todo.GetTodoItemsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Todo.GetTodoItemsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Todo.GetTodoItemsResponse}
 */
proto.Proto.Todo.GetTodoItemsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Proto.Todo.Todo;
      reader.readMessage(value,proto.Proto.Todo.Todo.deserializeBinaryFromReader);
      msg.addTodos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Todo.GetTodoItemsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Todo.GetTodoItemsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Todo.GetTodoItemsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.GetTodoItemsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTodosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Proto.Todo.Todo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Todo todos = 1;
 * @return {!Array<!proto.Proto.Todo.Todo>}
 */
proto.Proto.Todo.GetTodoItemsResponse.prototype.getTodosList = function() {
  return /** @type{!Array<!proto.Proto.Todo.Todo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.Todo.Todo, 1));
};


/** @param {!Array<!proto.Proto.Todo.Todo>} value */
proto.Proto.Todo.GetTodoItemsResponse.prototype.setTodosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Proto.Todo.Todo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.Todo.Todo}
 */
proto.Proto.Todo.GetTodoItemsResponse.prototype.addTodos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Proto.Todo.Todo, opt_index);
};


proto.Proto.Todo.GetTodoItemsResponse.prototype.clearTodosList = function() {
  this.setTodosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Todo.GetTodoItemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Todo.GetTodoItemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proto.Todo.GetTodoItemRequest.displayName = 'proto.Proto.Todo.GetTodoItemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Todo.GetTodoItemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Todo.GetTodoItemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Todo.GetTodoItemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.GetTodoItemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Todo.GetTodoItemRequest}
 */
proto.Proto.Todo.GetTodoItemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Todo.GetTodoItemRequest;
  return proto.Proto.Todo.GetTodoItemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Todo.GetTodoItemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Todo.GetTodoItemRequest}
 */
proto.Proto.Todo.GetTodoItemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Todo.GetTodoItemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Todo.GetTodoItemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Todo.GetTodoItemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.GetTodoItemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.Proto.Todo.GetTodoItemRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Proto.Todo.GetTodoItemRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Todo.GetTodoItemResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Todo.GetTodoItemResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proto.Todo.GetTodoItemResponse.displayName = 'proto.Proto.Todo.GetTodoItemResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Todo.GetTodoItemResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Todo.GetTodoItemResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Todo.GetTodoItemResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.GetTodoItemResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    todo: (f = msg.getTodo()) && proto.Proto.Todo.Todo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Todo.GetTodoItemResponse}
 */
proto.Proto.Todo.GetTodoItemResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Todo.GetTodoItemResponse;
  return proto.Proto.Todo.GetTodoItemResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Todo.GetTodoItemResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Todo.GetTodoItemResponse}
 */
proto.Proto.Todo.GetTodoItemResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Proto.Todo.Todo;
      reader.readMessage(value,proto.Proto.Todo.Todo.deserializeBinaryFromReader);
      msg.setTodo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Todo.GetTodoItemResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Todo.GetTodoItemResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Todo.GetTodoItemResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.GetTodoItemResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTodo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Proto.Todo.Todo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Todo todo = 1;
 * @return {?proto.Proto.Todo.Todo}
 */
proto.Proto.Todo.GetTodoItemResponse.prototype.getTodo = function() {
  return /** @type{?proto.Proto.Todo.Todo} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Todo.Todo, 1));
};


/** @param {?proto.Proto.Todo.Todo|undefined} value */
proto.Proto.Todo.GetTodoItemResponse.prototype.setTodo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Proto.Todo.GetTodoItemResponse.prototype.clearTodo = function() {
  this.setTodo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Proto.Todo.GetTodoItemResponse.prototype.hasTodo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Todo.PostTodoItemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Todo.PostTodoItemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proto.Todo.PostTodoItemRequest.displayName = 'proto.Proto.Todo.PostTodoItemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Todo.PostTodoItemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Todo.PostTodoItemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Todo.PostTodoItemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.PostTodoItemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Todo.PostTodoItemRequest}
 */
proto.Proto.Todo.PostTodoItemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Todo.PostTodoItemRequest;
  return proto.Proto.Todo.PostTodoItemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Todo.PostTodoItemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Todo.PostTodoItemRequest}
 */
proto.Proto.Todo.PostTodoItemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Todo.PostTodoItemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Todo.PostTodoItemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Todo.PostTodoItemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.PostTodoItemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.Proto.Todo.PostTodoItemRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Proto.Todo.PostTodoItemRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Todo.PostTodoItemResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Todo.PostTodoItemResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proto.Todo.PostTodoItemResponse.displayName = 'proto.Proto.Todo.PostTodoItemResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Todo.PostTodoItemResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Todo.PostTodoItemResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Todo.PostTodoItemResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.PostTodoItemResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    todo: (f = msg.getTodo()) && proto.Proto.Todo.Todo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Todo.PostTodoItemResponse}
 */
proto.Proto.Todo.PostTodoItemResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Todo.PostTodoItemResponse;
  return proto.Proto.Todo.PostTodoItemResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Todo.PostTodoItemResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Todo.PostTodoItemResponse}
 */
proto.Proto.Todo.PostTodoItemResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Proto.Todo.Todo;
      reader.readMessage(value,proto.Proto.Todo.Todo.deserializeBinaryFromReader);
      msg.setTodo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Todo.PostTodoItemResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Todo.PostTodoItemResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Todo.PostTodoItemResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.PostTodoItemResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTodo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Proto.Todo.Todo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Todo todo = 1;
 * @return {?proto.Proto.Todo.Todo}
 */
proto.Proto.Todo.PostTodoItemResponse.prototype.getTodo = function() {
  return /** @type{?proto.Proto.Todo.Todo} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Todo.Todo, 1));
};


/** @param {?proto.Proto.Todo.Todo|undefined} value */
proto.Proto.Todo.PostTodoItemResponse.prototype.setTodo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Proto.Todo.PostTodoItemResponse.prototype.clearTodo = function() {
  this.setTodo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Proto.Todo.PostTodoItemResponse.prototype.hasTodo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Todo.PutTodoItemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Todo.PutTodoItemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proto.Todo.PutTodoItemRequest.displayName = 'proto.Proto.Todo.PutTodoItemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Todo.PutTodoItemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Todo.PutTodoItemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Todo.PutTodoItemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.PutTodoItemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    todo: (f = msg.getTodo()) && proto.Proto.Todo.Todo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Todo.PutTodoItemRequest}
 */
proto.Proto.Todo.PutTodoItemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Todo.PutTodoItemRequest;
  return proto.Proto.Todo.PutTodoItemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Todo.PutTodoItemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Todo.PutTodoItemRequest}
 */
proto.Proto.Todo.PutTodoItemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Proto.Todo.Todo;
      reader.readMessage(value,proto.Proto.Todo.Todo.deserializeBinaryFromReader);
      msg.setTodo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Todo.PutTodoItemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Todo.PutTodoItemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Todo.PutTodoItemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.PutTodoItemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTodo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Proto.Todo.Todo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Todo todo = 1;
 * @return {?proto.Proto.Todo.Todo}
 */
proto.Proto.Todo.PutTodoItemRequest.prototype.getTodo = function() {
  return /** @type{?proto.Proto.Todo.Todo} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Todo.Todo, 1));
};


/** @param {?proto.Proto.Todo.Todo|undefined} value */
proto.Proto.Todo.PutTodoItemRequest.prototype.setTodo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Proto.Todo.PutTodoItemRequest.prototype.clearTodo = function() {
  this.setTodo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Proto.Todo.PutTodoItemRequest.prototype.hasTodo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Todo.PutTodoItemResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Todo.PutTodoItemResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proto.Todo.PutTodoItemResponse.displayName = 'proto.Proto.Todo.PutTodoItemResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Todo.PutTodoItemResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Todo.PutTodoItemResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Todo.PutTodoItemResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.PutTodoItemResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    todo: (f = msg.getTodo()) && proto.Proto.Todo.Todo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Todo.PutTodoItemResponse}
 */
proto.Proto.Todo.PutTodoItemResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Todo.PutTodoItemResponse;
  return proto.Proto.Todo.PutTodoItemResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Todo.PutTodoItemResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Todo.PutTodoItemResponse}
 */
proto.Proto.Todo.PutTodoItemResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Proto.Todo.Todo;
      reader.readMessage(value,proto.Proto.Todo.Todo.deserializeBinaryFromReader);
      msg.setTodo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Todo.PutTodoItemResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Todo.PutTodoItemResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Todo.PutTodoItemResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.PutTodoItemResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTodo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Proto.Todo.Todo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Todo todo = 1;
 * @return {?proto.Proto.Todo.Todo}
 */
proto.Proto.Todo.PutTodoItemResponse.prototype.getTodo = function() {
  return /** @type{?proto.Proto.Todo.Todo} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Todo.Todo, 1));
};


/** @param {?proto.Proto.Todo.Todo|undefined} value */
proto.Proto.Todo.PutTodoItemResponse.prototype.setTodo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Proto.Todo.PutTodoItemResponse.prototype.clearTodo = function() {
  this.setTodo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Proto.Todo.PutTodoItemResponse.prototype.hasTodo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Todo.DeleteTodoItemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Todo.DeleteTodoItemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proto.Todo.DeleteTodoItemRequest.displayName = 'proto.Proto.Todo.DeleteTodoItemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Todo.DeleteTodoItemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Todo.DeleteTodoItemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Todo.DeleteTodoItemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.DeleteTodoItemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Todo.DeleteTodoItemRequest}
 */
proto.Proto.Todo.DeleteTodoItemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Todo.DeleteTodoItemRequest;
  return proto.Proto.Todo.DeleteTodoItemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Todo.DeleteTodoItemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Todo.DeleteTodoItemRequest}
 */
proto.Proto.Todo.DeleteTodoItemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Todo.DeleteTodoItemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Todo.DeleteTodoItemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Todo.DeleteTodoItemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.DeleteTodoItemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.Proto.Todo.DeleteTodoItemRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Proto.Todo.DeleteTodoItemRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Todo.DeleteTodoItemResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Todo.DeleteTodoItemResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proto.Todo.DeleteTodoItemResponse.displayName = 'proto.Proto.Todo.DeleteTodoItemResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Todo.DeleteTodoItemResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Todo.DeleteTodoItemResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Todo.DeleteTodoItemResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.DeleteTodoItemResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    todo: (f = msg.getTodo()) && proto.Proto.Todo.Todo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Todo.DeleteTodoItemResponse}
 */
proto.Proto.Todo.DeleteTodoItemResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Todo.DeleteTodoItemResponse;
  return proto.Proto.Todo.DeleteTodoItemResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Todo.DeleteTodoItemResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Todo.DeleteTodoItemResponse}
 */
proto.Proto.Todo.DeleteTodoItemResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Proto.Todo.Todo;
      reader.readMessage(value,proto.Proto.Todo.Todo.deserializeBinaryFromReader);
      msg.setTodo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Todo.DeleteTodoItemResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Todo.DeleteTodoItemResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Todo.DeleteTodoItemResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Todo.DeleteTodoItemResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTodo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Proto.Todo.Todo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Todo todo = 1;
 * @return {?proto.Proto.Todo.Todo}
 */
proto.Proto.Todo.DeleteTodoItemResponse.prototype.getTodo = function() {
  return /** @type{?proto.Proto.Todo.Todo} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Todo.Todo, 1));
};


/** @param {?proto.Proto.Todo.Todo|undefined} value */
proto.Proto.Todo.DeleteTodoItemResponse.prototype.setTodo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Proto.Todo.DeleteTodoItemResponse.prototype.clearTodo = function() {
  this.setTodo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Proto.Todo.DeleteTodoItemResponse.prototype.hasTodo = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.Proto.Todo);
